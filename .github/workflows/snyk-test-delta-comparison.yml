name: Snyk Test with Snyk-Delta Comparison

on:
  pull_request:
    types: [opened, synchronize, reopened] # Trigger on PR creation, updates, and reopens
  workflow_dispatch: # Allows manual triggering from the GitHub UI

permissions:
  contents: read # Required to checkout the repository code
  security-events: write # Required to upload SARIF results to GitHub Code Scanning
  
env:
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} # Snyk token for authentication

jobs:
  snyk-test-delta:
    runs-on: ubuntu-latest # Run the job on an Ubuntu virtual machine

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v3 # Checks out the code of the current PR branch

      - name: Install system dependencies (jq)
        run: sudo apt-get update && sudo apt-get install -y jq # jq is used for SARIF validation and pretty-printing JSON

      - name: Install Node.js dependencies for PR branch
        run: npm install # Install project dependencies for the PR branch, ensuring lockfiles are present
        # Consider adding 'npm ci' instead of 'npm install' for CI if you use a lockfile
        # if your project isn't Node.js, replace this with your language's dependency install command (e.g., pip install -r requirements.txt)

      - name: Setup Snyk CLI
        uses: snyk/actions/setup@master # Installs and configures the Snyk CLI

      - name: Install snyk-delta CLI
        run: npm install -g snyk-delta # Installs the snyk-delta tool globally

      - name: Run Snyk Test on PR branch (JSON output)
        # --print-deps is crucial for snyk-delta to get the full dependency graph
        # || true ensures the step doesn't fail if Snyk finds vulnerabilities, allowing snyk-delta to run
        run: snyk test --json --print-deps > snyk-current.json || true

      - name: Print raw snyk-current.json
        run: cat snyk-current.json # Output the raw JSON for debugging purposes

      - name: Pretty Print snyk-current.json
        run: cat snyk-current.json | jq . # Pretty-print JSON for readability in logs

      - name: Run Snyk Test on PR branch (SARIF output for Code Scanning)
        run: |
          snyk test --sarif > snyk-current.sarif || true
          # Validate SARIF output using jq to catch empty/invalid files
          if ! jq empty snyk-current.sarif; then
            echo "SARIF output is invalid or empty. Content:"
            cat snyk-current.sarif
            exit 1
          fi

      - name: Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3 # Uploads the SARIF file to GitHub Code Scanning
        with:
          sarif_file: snyk-current.sarif

      - name: Fetch main branch and create worktree
        # Create a temporary worktree for the main branch to run Snyk Test on its state
        run: |
          git fetch origin main # Fetch the main branch
          git worktree add main-branch origin/main # Create a worktree named 'main-branch'

      - name: Install Node.js dependencies for main branch (baseline)
        working-directory: ./main-branch # Run command within the main-branch worktree
        run: npm install # Install dependencies for the baseline to ensure lockfiles are present
        # Replace with your language's dependency install command if not Node.js

      - name: Run Snyk Test on main (baseline)
        working-directory: ./main-branch # Run Snyk Test in the context of the main-branch worktree
        # Output to a file outside the worktree to be accessible by snyk-delta
        run: snyk test --json --print-deps > ../snyk-baseline.json || true

      - name: Print raw snyk-baseline.json
        run: cat snyk-baseline.json # Output the raw JSON for debugging purposes

      - name: Pretty Print snyk-baseline.json
        run: cat snyk-baseline.json | jq . # Pretty-print JSON for readability in logs

      - name: Compare vulnerabilities using snyk-delta
        # --base and --head specify the baseline and current JSON files
        # --setPassIfNoBaseline true prevents snyk-delta from failing if the baseline file is empty/invalid
        # -d enables debug output for snyk-delta itself, useful for troubleshooting its comparison logic
        # REMOVE "|| true" if you want the job to fail when snyk-delta finds new issues (snyk-delta exits with 1 in this case)
        run: snyk-delta --base snyk-baseline.json --head snyk-current.json --setPassIfNoBaseline true -d
