name: Snyk Test with Snyk-Delta Comparison - Fixed

on:
  pull_request:
    types: [opened, synchronize, reopened] # Trigger on PR creation, updates, and reopens
  workflow_dispatch: # Allows manual triggering from the GitHub UI

permissions:
  contents: read # Required to checkout the repository code
  security-events: write # Required to upload SARIF results to GitHub Code Scanning
  
env:
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} # Snyk token for authentication

jobs:
  snyk-test-delta:
    runs-on: ubuntu-latest # Run the job on an Ubuntu virtual machine

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v3 # Checks out the code of the current PR branch

      - name: Install system dependencies (jq)
        run: sudo apt-get update && sudo apt-get install -y jq # jq is used for SARIF validation and pretty-printing JSON

      - name: Install Node.js dependencies for PR branch
        run: npm install # Install project dependencies for the PR branch, ensuring lockfiles are present
        # Use 'npm ci' instead of 'npm install' for CI if you use a lockfile
        # If your project isn't Node.js, replace this with your language's dependency install command (e.g., pip install -r requirements.txt)

      - name: Setup Snyk CLI
        uses: snyk/actions/setup@master # Installs and configures the Snyk CLI

      # Using npm install -g snyk-delta is generally sufficient and simpler
      - name: Install snyk-delta CLI via npm
        run: npm install -g snyk-delta 
        # Reverted to npm install as direct curl for binary can sometimes cause path/permissions issues
        # and the npm package is usually sufficient and well-maintained.

      - name: Run Snyk Test on PR branch (JSON output)
        # IMPORTANT: Removed --all-projects. 
        # snyk-delta's --base --head flags expect single-project output JSON.
        # --print-deps is crucial for the dependencyGraph.
        # || true ensures the step doesn't fail if Snyk finds vulnerabilities, allowing snyk-delta to run
        run: snyk test --json --print-deps > snyk-current.json || true

      - name: Upload Snyk Current Scan JSON Artifact
        uses: actions/upload-artifact@v4 # Use the upload-artifact action
        with:
          name: snyk-current-scan-json # Name of the artifact
          path: snyk-current.json # Path to the file to upload
          retention-days: 7 # How long to keep the artifact (optional, default is 90 days)

      - name: Run Snyk Test (SARIF for Code Scanning)
        # SARIF output doesn't need --print-deps for code scanning uploads
        run: |
          snyk test --sarif > snyk-current.sarif || true
          # Validate SARIF output using jq to catch empty/invalid files
          if ! jq empty snyk-current.sarif; then
            echo "SARIF output is invalid or empty. Content:"
            cat snyk-current.sarif
            exit 1
          fi

      - name: Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3 # Uploads the SARIF file to GitHub Code Scanning
        with:
          sarif_file: snyk-current.sarif

      - name: Fetch main branch and create worktree
        # Create a temporary worktree for the main branch to run Snyk Test on its state
        run: |
          git fetch origin main # Fetch the main branch
          git worktree add main-branch origin/main # Create a worktree named 'main-branch'

      - name: Install Node.js dependencies for main (baseline)
        working-directory: ./main-branch # Run command within the main-branch worktree
        run: npm install # Install dependencies for the baseline to ensure lockfiles are present
        # Replace with your language's dependency install command if not Node.js

      - name: Run Snyk Test on main (baseline)
        working-directory: ./main-branch # Run Snyk Test in the context of the main-branch worktree
        # IMPORTANT: Removed --all-projects. 
        # --print-deps is crucial.
        # Output to a file outside the worktree to be accessible by snyk-delta
        run: snyk test --json --print-deps > ../snyk-baseline.json || true

      - name: Upload Snyk Baseline Scan JSON Artifact
        uses: actions/upload-artifact@v4 # Use the upload-artifact action
        with:
          name: snyk-baseline-scan-json # Name of the artifact
          path: snyk-baseline.json # Path to the file to upload
          retention-days: 7 # How long to keep the artifact (optional, default is 90 days)

      # Download both JSONs for local inspection / access by snyk-delta
      # These artifacts will be downloaded into a directory structure like:
      # ./artifacts/snyk-current-scan-json/snyk-current.json
      # ./artifacts/snyk-baseline-scan-json/snyk-baseline.json
      - name: Download JSON artifacts for snyk-delta
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts # Downloads artifacts into this directory

      # Debug view before snyk-delta - now using the downloaded artifacts
      - name: Inspect JSON before snyk-delta
        run: |
          echo "✅ snyk-current.json (from artifact):"
          cat ./artifacts/snyk-current-scan-json/snyk-current.json | jq .
          echo "✅ snyk-baseline.json (from artifact):"
          cat ./artifacts/snyk-baseline-scan-json/snyk-baseline.json | jq .

      # Run snyk-delta comparison
      - name: Compare vulnerabilities using snyk-delta
        # Ensure paths correctly point to the downloaded artifact files
        run: ./snyk-delta --base ./artifacts/snyk-baseline-scan-json/snyk-baseline.json --head ./artifacts/snyk-current-scan-json/snyk-current.json --setPassIfNoBaseline true -d
        # REMOVE "|| true" if you want the job to fail on new issues (snyk-delta exits with 1)
